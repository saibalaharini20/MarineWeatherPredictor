{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vgUyzwhYi9z8",
        "outputId": "ab7a0be9-550a-4d55-d32a-cdb31512f3a6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: plotly in /usr/local/lib/python3.12/dist-packages (5.24.1)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.12/dist-packages (2.2.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (2.32.4)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.12/dist-packages (from plotly) (8.5.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.12/dist-packages (from plotly) (25.0)\n",
            "Requirement already satisfied: numpy>=1.26.0 in /usr/local/lib/python3.12/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests) (3.4.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests) (3.11)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests) (2025.10.5)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install plotly pandas requests\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tTZqINV0j5jN"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import requests\n",
        "import plotly.graph_objects as go\n",
        "from datetime import datetime\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "PRDAQa6hkMum",
        "outputId": "c6ac5be6-750b-4aad-aac0-4081e4a020dc"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"    print(data)\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2025-10-20 00:00:00+00:00\",\n        \"max\": \"2025-10-20 04:00:00+00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2025-10-20 01:00:00+00:00\",\n          \"2025-10-20 04:00:00+00:00\",\n          \"2025-10-20 02:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wave Height (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.008944271909999111,\n        \"min\": 0.68,\n        \"max\": 0.7,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.68,\n          0.69,\n          0.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Speed (m/s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2940238085597831,\n        \"min\": 2.58,\n        \"max\": 3.28,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.8,\n          3.28,\n          3.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Swell Height (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01581138830084191,\n        \"min\": 0.82,\n        \"max\": 0.86,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.85,\n          0.82,\n          0.84\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Swell Period (s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.012247448713915629,\n        \"min\": 9.14,\n        \"max\": 9.17,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9.17,\n          9.16,\n          9.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-a3fe5e97-5c25-4090-94a8-7329a9efdeb3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>Wave Height (m)</th>\n",
              "      <th>Wind Speed (m/s)</th>\n",
              "      <th>Swell Height (m)</th>\n",
              "      <th>Swell Period (s)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025-10-20 00:00:00+00:00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>2.58</td>\n",
              "      <td>0.86</td>\n",
              "      <td>9.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025-10-20 01:00:00+00:00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>2.80</td>\n",
              "      <td>0.85</td>\n",
              "      <td>9.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025-10-20 02:00:00+00:00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>3.01</td>\n",
              "      <td>0.84</td>\n",
              "      <td>9.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025-10-20 03:00:00+00:00</td>\n",
              "      <td>0.69</td>\n",
              "      <td>3.23</td>\n",
              "      <td>0.83</td>\n",
              "      <td>9.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025-10-20 04:00:00+00:00</td>\n",
              "      <td>0.70</td>\n",
              "      <td>3.28</td>\n",
              "      <td>0.82</td>\n",
              "      <td>9.14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3fe5e97-5c25-4090-94a8-7329a9efdeb3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a3fe5e97-5c25-4090-94a8-7329a9efdeb3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a3fe5e97-5c25-4090-94a8-7329a9efdeb3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8f565d1e-384b-4594-abfe-419e08bc7cbb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8f565d1e-384b-4594-abfe-419e08bc7cbb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8f565d1e-384b-4594-abfe-419e08bc7cbb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                       Time  Wave Height (m)  Wind Speed (m/s)  \\\n",
              "0 2025-10-20 00:00:00+00:00             0.68              2.58   \n",
              "1 2025-10-20 01:00:00+00:00             0.68              2.80   \n",
              "2 2025-10-20 02:00:00+00:00             0.68              3.01   \n",
              "3 2025-10-20 03:00:00+00:00             0.69              3.23   \n",
              "4 2025-10-20 04:00:00+00:00             0.70              3.28   \n",
              "\n",
              "   Swell Height (m)  Swell Period (s)  \n",
              "0              0.86              9.17  \n",
              "1              0.85              9.17  \n",
              "2              0.84              9.16  \n",
              "3              0.83              9.16  \n",
              "4              0.82              9.14  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "\n",
        "API_KEY = \"1a4c5632-acae-11f0-b4de-0242ac130003-1a4c5696-acae-11f0-b4de-0242ac130003\"\n",
        "lat, lon = 17.6868, 83.2185\n",
        "\n",
        "url = f\"https://api.stormglass.io/v2/weather/point?lat={lat}&lng={lon}&params=waveHeight,windSpeed,swellHeight,swellPeriod,waterTemperature\"\n",
        "headers = {\"Authorization\": API_KEY}\n",
        "\n",
        "response = requests.get(url, headers=headers)\n",
        "data = response.json()\n",
        "if 'hours' in data:\n",
        "    df = pd.json_normalize(data['hours'])\n",
        "    df['time'] = pd.to_datetime(df['time'])\n",
        "    df = df[['time', 'waveHeight.sg', 'windSpeed.sg', 'swellHeight.sg', 'swellPeriod.sg']]\n",
        "    df.columns = ['Time', 'Wave Height (m)', 'Wind Speed (m/s)', 'Swell Height (m)', 'Swell Period (s)']\n",
        "    display(df.head())\n",
        "else:\n",
        "    print(\"⚠️ API did not return 'hours' field. Here’s the response:\")\n",
        "    print(data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ZJrT1iZqlV9V",
        "outputId": "4375185c-edb5-4cb9-9dcc-7159e891bc15"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 241,\n  \"fields\": [\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2025-10-20 00:00:00+00:00\",\n        \"max\": \"2025-10-30 00:00:00+00:00\",\n        \"num_unique_values\": 241,\n        \"samples\": [\n          \"2025-10-21 00:00:00+00:00\",\n          \"2025-10-20 06:00:00+00:00\",\n          \"2025-10-29 06:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wave Height (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3788132173846149,\n        \"min\": 0.6,\n        \"max\": 1.77,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          1.42,\n          1.29,\n          1.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Speed (m/s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1934251125682067,\n        \"min\": 0.83,\n        \"max\": 6.31,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          3.3,\n          3.85,\n          3.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Swell Height (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3092032492998634,\n        \"min\": 0.51,\n        \"max\": 1.63,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          1.07,\n          0.63,\n          1.53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Swell Period (s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3596329364912072,\n        \"min\": 4.15,\n        \"max\": 9.69,\n        \"num_unique_values\": 172,\n        \"samples\": [\n          6.65,\n          8.26,\n          7.97\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1878437864247022,\n        \"min\": 0.8299129133826462,\n        \"max\": 6.271772682696942,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          3.2945279948262933,\n          3.841311525883651,\n          3.185057068412513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12901643768855114,\n        \"min\": 0.012023152695043365,\n        \"max\": 0.6935181443743205,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          0.189961288966572,\n          0.2585067912326864,\n          0.1775147063076412\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wave_energy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.036020212674603,\n        \"min\": 0.18643400000000002,\n        \"max\": 9.884299500000001,\n        \"num_unique_values\": 239,\n        \"samples\": [\n          2.1145280000000004,\n          0.9032654999999999,\n          1.9057499999999996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-aa97b14e-ed4a-45db-9d7b-097e3adaf943\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>Wave Height (m)</th>\n",
              "      <th>Wind Speed (m/s)</th>\n",
              "      <th>Swell Height (m)</th>\n",
              "      <th>Swell Period (s)</th>\n",
              "      <th>wind_x</th>\n",
              "      <th>wind_y</th>\n",
              "      <th>wave_energy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025-10-20 00:00:00+00:00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>2.58</td>\n",
              "      <td>0.86</td>\n",
              "      <td>9.17</td>\n",
              "      <td>2.577385</td>\n",
              "      <td>0.116137</td>\n",
              "      <td>0.596496</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025-10-20 01:00:00+00:00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>2.80</td>\n",
              "      <td>0.85</td>\n",
              "      <td>9.17</td>\n",
              "      <td>2.796657</td>\n",
              "      <td>0.136779</td>\n",
              "      <td>0.647360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025-10-20 02:00:00+00:00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>3.01</td>\n",
              "      <td>0.84</td>\n",
              "      <td>9.16</td>\n",
              "      <td>3.005847</td>\n",
              "      <td>0.158056</td>\n",
              "      <td>0.695912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025-10-20 03:00:00+00:00</td>\n",
              "      <td>0.69</td>\n",
              "      <td>3.23</td>\n",
              "      <td>0.83</td>\n",
              "      <td>9.16</td>\n",
              "      <td>3.224869</td>\n",
              "      <td>0.181992</td>\n",
              "      <td>0.768901</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025-10-20 04:00:00+00:00</td>\n",
              "      <td>0.70</td>\n",
              "      <td>3.28</td>\n",
              "      <td>0.82</td>\n",
              "      <td>9.14</td>\n",
              "      <td>3.274627</td>\n",
              "      <td>0.187667</td>\n",
              "      <td>0.803600</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa97b14e-ed4a-45db-9d7b-097e3adaf943')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aa97b14e-ed4a-45db-9d7b-097e3adaf943 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aa97b14e-ed4a-45db-9d7b-097e3adaf943');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2d0a8b3d-859f-4dd6-b92c-e5b2c91fca60\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d0a8b3d-859f-4dd6-b92c-e5b2c91fca60')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2d0a8b3d-859f-4dd6-b92c-e5b2c91fca60 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                       Time  Wave Height (m)  Wind Speed (m/s)  \\\n",
              "0 2025-10-20 00:00:00+00:00             0.68              2.58   \n",
              "1 2025-10-20 01:00:00+00:00             0.68              2.80   \n",
              "2 2025-10-20 02:00:00+00:00             0.68              3.01   \n",
              "3 2025-10-20 03:00:00+00:00             0.69              3.23   \n",
              "4 2025-10-20 04:00:00+00:00             0.70              3.28   \n",
              "\n",
              "   Swell Height (m)  Swell Period (s)    wind_x    wind_y  wave_energy  \n",
              "0              0.86              9.17  2.577385  0.116137     0.596496  \n",
              "1              0.85              9.17  2.796657  0.136779     0.647360  \n",
              "2              0.84              9.16  3.005847  0.158056     0.695912  \n",
              "3              0.83              9.16  3.224869  0.181992     0.768901  \n",
              "4              0.82              9.14  3.274627  0.187667     0.803600  "
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import math\n",
        "df['wind_x'] = df['Wind Speed (m/s)'] * df['Wind Speed (m/s)'].apply(lambda x: math.cos(math.radians(x)))\n",
        "df['wind_y'] = df['Wind Speed (m/s)'] * df['Wind Speed (m/s)'].apply(lambda x: math.sin(math.radians(x)))\n",
        "df['wave_energy'] = 0.5 * (df['Wave Height (m)'] ** 2) * df['Wind Speed (m/s)']\n",
        "\n",
        "df.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "CpSmZHzilaVH",
        "outputId": "9b4c7ae6-edeb-445c-99f9-cfd9f8f91a02"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df_train\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"Wave Height (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.832970350842894,\n        \"min\": 0.21546192794608673,\n        \"max\": 2.9632834224814486,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.37796338080086617,\n          2.7055165811974167,\n          2.3622853540306408\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Speed (m/s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.250113161468719,\n        \"min\": 0.6008058927022653,\n        \"max\": 14.79193158460371,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          13.221420624024224,\n          7.597065024024664,\n          10.324683246713095\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Swell Height (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7042229929461749,\n        \"min\": 0.11214780123092485,\n        \"max\": 2.476129240250232,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          0.32555665561808556,\n          0.8606128123750664,\n          2.0424667731484325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Swell Period (s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.93452218636701,\n        \"min\": 5.143934886297559,\n        \"max\": 14.905051420006734,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          13.77472013527053,\n          6.629344270814297,\n          6.0077800137742665\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Condition\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Moderate\",\n          \"Rough\",\n          \"Calm\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "df_train"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-c18f39ff-4be2-4d59-b741-009744853b81\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Wave Height (m)</th>\n",
              "      <th>Wind Speed (m/s)</th>\n",
              "      <th>Swell Height (m)</th>\n",
              "      <th>Swell Period (s)</th>\n",
              "      <th>Condition</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.248712</td>\n",
              "      <td>0.955723</td>\n",
              "      <td>1.640876</td>\n",
              "      <td>5.516817</td>\n",
              "      <td>Moderate</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.862000</td>\n",
              "      <td>9.727951</td>\n",
              "      <td>0.301936</td>\n",
              "      <td>10.313546</td>\n",
              "      <td>Rough</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.249583</td>\n",
              "      <td>5.058162</td>\n",
              "      <td>0.487909</td>\n",
              "      <td>10.406351</td>\n",
              "      <td>Rough</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.876244</td>\n",
              "      <td>7.874275</td>\n",
              "      <td>2.256530</td>\n",
              "      <td>11.374299</td>\n",
              "      <td>Moderate</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.636852</td>\n",
              "      <td>13.659714</td>\n",
              "      <td>1.555430</td>\n",
              "      <td>12.260913</td>\n",
              "      <td>Rough</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c18f39ff-4be2-4d59-b741-009744853b81')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c18f39ff-4be2-4d59-b741-009744853b81 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c18f39ff-4be2-4d59-b741-009744853b81');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-67ddbeb4-3d76-4fbb-865f-097f656356b0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67ddbeb4-3d76-4fbb-865f-097f656356b0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-67ddbeb4-3d76-4fbb-865f-097f656356b0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   Wave Height (m)  Wind Speed (m/s)  Swell Height (m)  Swell Period (s)  \\\n",
              "0         1.248712          0.955723          1.640876          5.516817   \n",
              "1         2.862000          9.727951          0.301936         10.313546   \n",
              "2         2.249583          5.058162          0.487909         10.406351   \n",
              "3         1.876244          7.874275          2.256530         11.374299   \n",
              "4         0.636852         13.659714          1.555430         12.260913   \n",
              "\n",
              "  Condition  \n",
              "0  Moderate  \n",
              "1     Rough  \n",
              "2     Rough  \n",
              "3  Moderate  \n",
              "4     Rough  "
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "np.random.seed(42)\n",
        "train_data = {\n",
        "    'Wave Height (m)': np.random.uniform(0.2, 3.0, 100),\n",
        "    'Wind Speed (m/s)': np.random.uniform(0.5, 15.0, 100),\n",
        "    'Swell Height (m)': np.random.uniform(0.1, 2.5, 100),\n",
        "    'Swell Period (s)': np.random.uniform(5, 15, 100)\n",
        "}\n",
        "\n",
        "df_train = pd.DataFrame(train_data)\n",
        "def label_condition(row):\n",
        "    if row['Wave Height (m)'] < 1.0 and row['Wind Speed (m/s)'] < 5:\n",
        "        return 'Calm'\n",
        "    elif row['Wave Height (m)'] < 2.0 and row['Wind Speed (m/s)'] < 10:\n",
        "        return 'Moderate'\n",
        "    else:\n",
        "        return 'Rough'\n",
        "\n",
        "df_train['Condition'] = df_train.apply(label_condition, axis=1)\n",
        "df_train.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "87UlBUVTlyw-",
        "outputId": "e88a2182-365f-4072-ea13-83a31a4f06a8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "✅ Accuracy: 0.9\n",
            "\n",
            "📈 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        Calm       1.00      0.50      0.67         4\n",
            "    Moderate       0.67      1.00      0.80         4\n",
            "       Rough       1.00      1.00      1.00        12\n",
            "\n",
            "    accuracy                           0.90        20\n",
            "   macro avg       0.89      0.83      0.82        20\n",
            "weighted avg       0.93      0.90      0.89        20\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "\n",
        "X = df_train[['Wave Height (m)', 'Wind Speed (m/s)', 'Swell Height (m)', 'Swell Period (s)']]\n",
        "y = df_train['Condition']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)\n",
        "print(\"✅ Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "print(\"\\n📈 Classification Report:\\n\", classification_report(y_test, y_pred))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LLHahK_OmWuN",
        "outputId": "cdb950b4-0f1b-4eb6-e42a-7d5c0bedcbec"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "🌊 Predicted Marine Condition (Latest): Calm\n"
          ]
        }
      ],
      "source": [
        "\n",
        "X_latest = df[['Wave Height (m)', 'Wind Speed (m/s)', 'Swell Height (m)', 'Swell Period (s)']].iloc[-1:]\n",
        "prediction = model.predict(X_latest)\n",
        "\n",
        "print(\"🌊 Predicted Marine Condition (Latest):\", prediction[0])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Wbtli-yLmX5V",
        "outputId": "dee1fa23-5419-4aeb-bb02-ac42db1de55d"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 241,\n  \"fields\": [\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2025-10-20 00:00:00+00:00\",\n        \"max\": \"2025-10-30 00:00:00+00:00\",\n        \"num_unique_values\": 241,\n        \"samples\": [\n          \"2025-10-21 00:00:00+00:00\",\n          \"2025-10-20 06:00:00+00:00\",\n          \"2025-10-29 06:00:00+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wave Height (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3788132173846149,\n        \"min\": 0.6,\n        \"max\": 1.77,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          1.42,\n          1.29,\n          1.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Speed (m/s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1934251125682067,\n        \"min\": 0.83,\n        \"max\": 6.31,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          3.3,\n          3.85,\n          3.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Swell Height (m)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3092032492998634,\n        \"min\": 0.51,\n        \"max\": 1.63,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          1.07,\n          0.63,\n          1.53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Swell Period (s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3596329364912072,\n        \"min\": 4.15,\n        \"max\": 9.69,\n        \"num_unique_values\": 172,\n        \"samples\": [\n          6.65,\n          8.26,\n          7.97\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1878437864247022,\n        \"min\": 0.8299129133826462,\n        \"max\": 6.271772682696942,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          3.2945279948262933,\n          3.841311525883651,\n          3.185057068412513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12901643768855114,\n        \"min\": 0.012023152695043365,\n        \"max\": 0.6935181443743205,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          0.189961288966572,\n          0.2585067912326864,\n          0.1775147063076412\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wave_energy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.036020212674603,\n        \"min\": 0.18643400000000002,\n        \"max\": 9.884299500000001,\n        \"num_unique_values\": 239,\n        \"samples\": [\n          2.1145280000000004,\n          0.9032654999999999,\n          1.9057499999999996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted Condition\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Moderate\",\n          \"Calm\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-d529de21-dcdd-4893-9a44-6e9d0c77c2ad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>Wave Height (m)</th>\n",
              "      <th>Wind Speed (m/s)</th>\n",
              "      <th>Swell Height (m)</th>\n",
              "      <th>Swell Period (s)</th>\n",
              "      <th>wind_x</th>\n",
              "      <th>wind_y</th>\n",
              "      <th>wave_energy</th>\n",
              "      <th>Predicted Condition</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025-10-20 00:00:00+00:00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>2.58</td>\n",
              "      <td>0.86</td>\n",
              "      <td>9.17</td>\n",
              "      <td>2.577385</td>\n",
              "      <td>0.116137</td>\n",
              "      <td>0.596496</td>\n",
              "      <td>Calm</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025-10-20 01:00:00+00:00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>2.80</td>\n",
              "      <td>0.85</td>\n",
              "      <td>9.17</td>\n",
              "      <td>2.796657</td>\n",
              "      <td>0.136779</td>\n",
              "      <td>0.647360</td>\n",
              "      <td>Calm</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025-10-20 02:00:00+00:00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>3.01</td>\n",
              "      <td>0.84</td>\n",
              "      <td>9.16</td>\n",
              "      <td>3.005847</td>\n",
              "      <td>0.158056</td>\n",
              "      <td>0.695912</td>\n",
              "      <td>Calm</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025-10-20 03:00:00+00:00</td>\n",
              "      <td>0.69</td>\n",
              "      <td>3.23</td>\n",
              "      <td>0.83</td>\n",
              "      <td>9.16</td>\n",
              "      <td>3.224869</td>\n",
              "      <td>0.181992</td>\n",
              "      <td>0.768901</td>\n",
              "      <td>Calm</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025-10-20 04:00:00+00:00</td>\n",
              "      <td>0.70</td>\n",
              "      <td>3.28</td>\n",
              "      <td>0.82</td>\n",
              "      <td>9.14</td>\n",
              "      <td>3.274627</td>\n",
              "      <td>0.187667</td>\n",
              "      <td>0.803600</td>\n",
              "      <td>Calm</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d529de21-dcdd-4893-9a44-6e9d0c77c2ad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d529de21-dcdd-4893-9a44-6e9d0c77c2ad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d529de21-dcdd-4893-9a44-6e9d0c77c2ad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b25024c1-9b52-42ab-a82a-456bb83deae8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b25024c1-9b52-42ab-a82a-456bb83deae8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b25024c1-9b52-42ab-a82a-456bb83deae8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                       Time  Wave Height (m)  Wind Speed (m/s)  \\\n",
              "0 2025-10-20 00:00:00+00:00             0.68              2.58   \n",
              "1 2025-10-20 01:00:00+00:00             0.68              2.80   \n",
              "2 2025-10-20 02:00:00+00:00             0.68              3.01   \n",
              "3 2025-10-20 03:00:00+00:00             0.69              3.23   \n",
              "4 2025-10-20 04:00:00+00:00             0.70              3.28   \n",
              "\n",
              "   Swell Height (m)  Swell Period (s)    wind_x    wind_y  wave_energy  \\\n",
              "0              0.86              9.17  2.577385  0.116137     0.596496   \n",
              "1              0.85              9.17  2.796657  0.136779     0.647360   \n",
              "2              0.84              9.16  3.005847  0.158056     0.695912   \n",
              "3              0.83              9.16  3.224869  0.181992     0.768901   \n",
              "4              0.82              9.14  3.274627  0.187667     0.803600   \n",
              "\n",
              "  Predicted Condition  \n",
              "0                Calm  \n",
              "1                Calm  \n",
              "2                Calm  \n",
              "3                Calm  \n",
              "4                Calm  "
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "X_all = df[['Wave Height (m)', 'Wind Speed (m/s)', 'Swell Height (m)', 'Swell Period (s)']]\n",
        "df['Predicted Condition'] = model.predict(X_all)\n",
        "\n",
        "df.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "QA028MOap6Iu",
        "outputId": "71f3e263-327d-49a4-df8b-435e35d8b73d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"13146b8e-1e88-4451-b9a5-6ae7c7f75adc\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"13146b8e-1e88-4451-b9a5-6ae7c7f75adc\")) {                    Plotly.newPlot(                        \"13146b8e-1e88-4451-b9a5-6ae7c7f75adc\",                        [{\"customdata\":[[2.58,0.86,9.17],[2.8,0.85,9.17],[3.01,0.84,9.16],[3.23,0.83,9.16],[3.28,0.82,9.14],[3.34,0.81,9.13],[3.39,0.8,9.11],[3.44,0.79,9.08],[3.48,0.79,9.04],[3.53,0.78,9.01],[3.31,0.77,8.99],[3.1,0.77,8.96],[2.88,0.76,8.94],[2.73,0.75,8.99],[2.57,0.73,9.03],[2.42,0.72,9.08],[2.67,0.71,9.1],[2.55,0.84,6.99],[2.4,0.83,6.97],[2.24,0.82,6.94],[2.3,0.8,7.57],[2.35,0.78,8.19],[1.55,0.76,8.97],[1.44,0.76,8.99],[1.34,0.76,9.0],[1.25,0.76,9.02],[1.15,0.76,9.03],[1.4,0.76,9.04],[1.58,0.77,8.91],[1.44,0.77,8.89],[1.28,0.77,8.86],[1.13,0.76,8.84],[0.97,0.76,8.81],[3.19,0.73,8.73],[2.2,0.73,8.7],[1.2,0.72,8.68],[1.29,0.71,8.66],[1.39,0.71,8.65],[1.48,0.7,8.63],[1.35,0.7,8.6],[1.23,0.69,8.56],[1.1,0.69,8.53],[1.28,0.68,8.52],[1.46,0.68,8.5],[1.64,0.67,8.49],[1.63,0.66,8.47],[1.61,0.66,8.46],[1.6,0.65,8.44],[1.53,0.64,8.42],[1.46,0.64,8.4],[1.39,0.63,8.38],[1.46,0.63,8.36],[1.53,0.62,8.34],[1.6,0.62,8.32],[2.05,0.61,8.3],[2.49,0.61,8.29],[2.94,0.6,8.27],[2.67,0.6,8.26],[2.41,0.59,8.24],[2.14,0.59,8.23],[2.2,0.58,8.21],[2.26,0.58,8.2],[2.32,0.57,8.18],[1.87,0.57,8.17],[1.42,0.56,8.16],[0.97,0.56,8.15],[1.43,0.56,8.12],[1.9,0.56,8.08],[2.36,0.56,8.05],[2.47,0.56,8.02],[2.58,0.55,8.0],[2.69,0.55,7.97],[3.04,0.55,9.69],[3.39,0.54,9.68],[3.74,0.53,9.66],[3.95,0.53,9.66],[4.15,0.53,9.65],[4.36,0.53,9.65],[4.36,0.53,9.64],[4.36,0.53,9.64],[4.36,0.53,9.63],[3.93,0.53,9.61],[3.5,0.53,9.6],[3.07,0.53,9.58],[2.85,0.53,9.57],[2.63,0.53,9.55],[2.41,0.53,9.54],[2.24,0.53,9.53],[2.08,0.52,9.53],[1.91,0.52,9.52],[2.11,0.52,9.51],[2.3,0.51,9.49],[2.5,0.51,9.48],[2.35,0.51,9.44],[2.21,0.51,9.4],[2.06,0.51,9.36]],\"hovertemplate\":\"Predicted Condition=Calm\\u003cbr\\u003eTime=%{x}\\u003cbr\\u003eWave Height (m)=%{y}\\u003cbr\\u003eWind Speed (m\\u002fs)=%{customdata[0]}\\u003cbr\\u003eSwell Height (m)=%{customdata[1]}\\u003cbr\\u003eSwell Period (s)=%{customdata[2]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Calm\",\"marker\":{\"color\":\"#636efa\",\"size\":[2.58,2.8,3.01,3.23,3.28,3.34,3.39,3.44,3.48,3.53,3.31,3.1,2.88,2.73,2.57,2.42,2.67,2.55,2.4,2.24,2.3,2.35,1.55,1.44,1.34,1.25,1.15,1.4,1.58,1.44,1.28,1.13,0.97,3.19,2.2,1.2,1.29,1.39,1.48,1.35,1.23,1.1,1.28,1.46,1.64,1.63,1.61,1.6,1.53,1.46,1.39,1.46,1.53,1.6,2.05,2.49,2.94,2.67,2.41,2.14,2.2,2.26,2.32,1.87,1.42,0.97,1.43,1.9,2.36,2.47,2.58,2.69,3.04,3.39,3.74,3.95,4.15,4.36,4.36,4.36,4.36,3.93,3.5,3.07,2.85,2.63,2.41,2.24,2.08,1.91,2.11,2.3,2.5,2.35,2.21,2.06],\"sizemode\":\"area\",\"sizeref\":0.015774999999999997,\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"Calm\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"2025-10-20T00:00:00+00:00\",\"2025-10-20T01:00:00+00:00\",\"2025-10-20T02:00:00+00:00\",\"2025-10-20T03:00:00+00:00\",\"2025-10-20T04:00:00+00:00\",\"2025-10-20T05:00:00+00:00\",\"2025-10-20T06:00:00+00:00\",\"2025-10-20T07:00:00+00:00\",\"2025-10-20T08:00:00+00:00\",\"2025-10-20T09:00:00+00:00\",\"2025-10-20T10:00:00+00:00\",\"2025-10-20T11:00:00+00:00\",\"2025-10-20T12:00:00+00:00\",\"2025-10-20T13:00:00+00:00\",\"2025-10-20T14:00:00+00:00\",\"2025-10-20T15:00:00+00:00\",\"2025-10-20T16:00:00+00:00\",\"2025-10-25T16:00:00+00:00\",\"2025-10-25T17:00:00+00:00\",\"2025-10-25T18:00:00+00:00\",\"2025-10-25T19:00:00+00:00\",\"2025-10-25T20:00:00+00:00\",\"2025-10-26T05:00:00+00:00\",\"2025-10-26T06:00:00+00:00\",\"2025-10-26T07:00:00+00:00\",\"2025-10-26T08:00:00+00:00\",\"2025-10-26T09:00:00+00:00\",\"2025-10-26T10:00:00+00:00\",\"2025-10-27T02:00:00+00:00\",\"2025-10-27T03:00:00+00:00\",\"2025-10-27T04:00:00+00:00\",\"2025-10-27T05:00:00+00:00\",\"2025-10-27T06:00:00+00:00\",\"2025-10-27T10:00:00+00:00\",\"2025-10-27T11:00:00+00:00\",\"2025-10-27T12:00:00+00:00\",\"2025-10-27T13:00:00+00:00\",\"2025-10-27T14:00:00+00:00\",\"2025-10-27T15:00:00+00:00\",\"2025-10-27T16:00:00+00:00\",\"2025-10-27T17:00:00+00:00\",\"2025-10-27T18:00:00+00:00\",\"2025-10-27T19:00:00+00:00\",\"2025-10-27T20:00:00+00:00\",\"2025-10-27T21:00:00+00:00\",\"2025-10-27T22:00:00+00:00\",\"2025-10-27T23:00:00+00:00\",\"2025-10-28T00:00:00+00:00\",\"2025-10-28T01:00:00+00:00\",\"2025-10-28T02:00:00+00:00\",\"2025-10-28T03:00:00+00:00\",\"2025-10-28T04:00:00+00:00\",\"2025-10-28T05:00:00+00:00\",\"2025-10-28T06:00:00+00:00\",\"2025-10-28T07:00:00+00:00\",\"2025-10-28T08:00:00+00:00\",\"2025-10-28T09:00:00+00:00\",\"2025-10-28T10:00:00+00:00\",\"2025-10-28T11:00:00+00:00\",\"2025-10-28T12:00:00+00:00\",\"2025-10-28T13:00:00+00:00\",\"2025-10-28T14:00:00+00:00\",\"2025-10-28T15:00:00+00:00\",\"2025-10-28T16:00:00+00:00\",\"2025-10-28T17:00:00+00:00\",\"2025-10-28T18:00:00+00:00\",\"2025-10-28T19:00:00+00:00\",\"2025-10-28T20:00:00+00:00\",\"2025-10-28T21:00:00+00:00\",\"2025-10-28T22:00:00+00:00\",\"2025-10-28T23:00:00+00:00\",\"2025-10-29T00:00:00+00:00\",\"2025-10-29T01:00:00+00:00\",\"2025-10-29T02:00:00+00:00\",\"2025-10-29T03:00:00+00:00\",\"2025-10-29T04:00:00+00:00\",\"2025-10-29T05:00:00+00:00\",\"2025-10-29T06:00:00+00:00\",\"2025-10-29T07:00:00+00:00\",\"2025-10-29T08:00:00+00:00\",\"2025-10-29T09:00:00+00:00\",\"2025-10-29T10:00:00+00:00\",\"2025-10-29T11:00:00+00:00\",\"2025-10-29T12:00:00+00:00\",\"2025-10-29T13:00:00+00:00\",\"2025-10-29T14:00:00+00:00\",\"2025-10-29T15:00:00+00:00\",\"2025-10-29T16:00:00+00:00\",\"2025-10-29T17:00:00+00:00\",\"2025-10-29T18:00:00+00:00\",\"2025-10-29T19:00:00+00:00\",\"2025-10-29T20:00:00+00:00\",\"2025-10-29T21:00:00+00:00\",\"2025-10-29T22:00:00+00:00\",\"2025-10-29T23:00:00+00:00\",\"2025-10-30T00:00:00+00:00\"],\"xaxis\":\"x\",\"y\":[0.68,0.68,0.68,0.69,0.7,0.71,0.73,0.75,0.78,0.81,0.83,0.85,0.87,0.88,0.88,0.89,0.9,1.0,1.0,0.99,0.99,0.98,0.97,0.97,0.97,0.96,0.96,0.96,0.94,0.94,0.93,0.93,0.92,0.88,0.87,0.86,0.85,0.84,0.83,0.82,0.81,0.8,0.79,0.79,0.78,0.77,0.76,0.75,0.74,0.74,0.73,0.72,0.71,0.7,0.69,0.68,0.67,0.66,0.66,0.65,0.64,0.64,0.63,0.63,0.62,0.62,0.62,0.61,0.61,0.61,0.6,0.6,0.72,0.73,0.73,0.74,0.75,0.76,0.75,0.73,0.72,0.71,0.71,0.7,0.69,0.69,0.68,0.67,0.66,0.65,0.64,0.63,0.62,0.61,0.61,0.6],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"customdata\":[[2.92,0.7,9.11],[3.17,0.69,9.13],[3.3,0.68,9.16],[3.43,0.68,9.19],[3.56,0.67,9.22],[3.68,0.66,9.21],[3.79,0.66,9.19],[3.91,0.65,9.18],[4.24,0.64,9.24],[4.56,0.63,9.29],[4.89,0.62,9.35],[4.79,0.64,7.62],[4.69,0.66,5.88],[4.59,0.68,4.15],[4.6,0.65,5.95],[4.6,0.61,7.75],[4.61,0.58,9.55],[4.58,0.62,8.06],[4.56,0.67,6.57],[4.53,0.71,5.08],[4.63,0.75,5.16],[4.72,0.79,5.24],[4.82,0.83,5.32],[4.59,0.86,5.34],[4.37,0.9,5.37],[4.14,0.93,5.39],[4.04,0.97,5.39],[3.95,1.0,5.39],[3.85,1.04,5.39],[4.01,1.02,5.4],[4.17,0.99,5.42],[4.33,0.97,5.43],[4.53,0.97,5.45],[4.73,0.98,5.48],[4.93,0.98,5.5],[5.39,0.95,5.54],[5.85,0.92,5.58],[6.31,0.89,5.62],[5.83,0.91,5.57],[5.35,0.94,5.52],[4.87,0.96,5.47],[4.66,0.98,5.5],[4.46,1.0,5.54],[4.25,1.02,5.57],[4.34,1.07,5.57],[4.42,1.13,5.57],[4.51,1.18,5.57],[4.23,1.08,5.39],[3.95,0.98,5.21],[3.67,0.88,5.03],[3.7,0.89,6.24],[3.74,0.9,7.45],[3.77,0.91,8.66],[3.65,0.99,8.29],[3.53,1.08,7.91],[3.41,1.16,7.54],[3.48,1.22,7.4],[3.56,1.29,7.25],[3.63,1.35,7.11],[3.33,1.38,7.11],[3.03,1.41,7.11],[2.73,1.44,7.11],[3.07,1.46,7.14],[3.42,1.49,7.18],[3.76,1.51,7.21],[3.17,1.53,7.21],[2.58,1.55,7.22],[1.99,1.57,7.22],[2.13,1.59,7.14],[2.26,1.61,7.05],[2.4,1.63,6.97],[2.05,1.62,6.95],[1.71,1.62,6.93],[1.36,1.61,6.91],[1.37,1.59,6.92],[1.39,1.57,6.92],[1.4,1.55,6.93],[1.43,1.54,6.88],[1.45,1.53,6.83],[1.48,1.52,6.78],[1.38,1.5,6.8],[1.27,1.49,6.81],[1.17,1.47,6.83],[1.24,1.45,6.82],[1.31,1.44,6.81],[1.38,1.42,6.8],[1.8,1.41,6.81],[2.21,1.39,6.83],[2.63,1.38,6.84],[2.03,1.37,6.75],[1.43,1.37,6.65],[0.83,1.36,6.56],[0.92,1.35,6.55],[1.01,1.34,6.53],[1.1,1.33,6.52],[1.25,1.31,6.56],[1.41,1.29,6.59],[1.56,1.27,6.63],[1.53,1.25,6.69],[1.5,1.24,6.74],[1.47,1.22,6.8],[1.49,1.17,6.97],[1.52,1.13,7.14],[1.54,1.08,7.31],[4.33,1.05,7.21],[4.11,1.03,7.11],[3.9,1.0,7.01],[3.21,0.98,7.04],[2.51,0.97,7.07],[1.82,0.95,7.1],[2.02,0.93,7.05],[2.21,0.92,7.01],[2.41,0.9,6.96],[2.46,0.89,6.96],[2.5,0.87,6.97],[2.55,0.86,6.97],[2.6,0.86,6.99],[2.66,0.85,7.0],[2.71,0.85,7.02],[2.41,0.76,8.82],[2.35,0.76,8.84],[2.28,0.76,8.86],[2.22,0.76,8.88],[2.07,0.76,8.9],[1.91,0.76,8.91],[1.76,0.76,8.93],[1.65,0.76,8.95],[1.64,0.77,9.05],[1.89,0.77,9.06],[2.33,0.77,9.06],[2.77,0.78,9.06],[3.21,0.78,9.06],[3.27,0.78,9.05],[3.32,0.79,9.05],[3.38,0.79,9.04],[2.93,0.79,9.03],[2.48,0.79,9.01],[2.03,0.79,9.0],[1.98,0.79,8.98],[1.92,0.78,8.97],[1.87,0.78,8.95],[1.73,0.78,8.93],[2.04,0.75,8.79],[3.12,0.75,8.77],[4.19,0.74,8.75]],\"hovertemplate\":\"Predicted Condition=Moderate\\u003cbr\\u003eTime=%{x}\\u003cbr\\u003eWave Height (m)=%{y}\\u003cbr\\u003eWind Speed (m\\u002fs)=%{customdata[0]}\\u003cbr\\u003eSwell Height (m)=%{customdata[1]}\\u003cbr\\u003eSwell Period (s)=%{customdata[2]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Moderate\",\"marker\":{\"color\":\"#EF553B\",\"size\":[2.92,3.17,3.3,3.43,3.56,3.68,3.79,3.91,4.24,4.56,4.89,4.79,4.69,4.59,4.6,4.6,4.61,4.58,4.56,4.53,4.63,4.72,4.82,4.59,4.37,4.14,4.04,3.95,3.85,4.01,4.17,4.33,4.53,4.73,4.93,5.39,5.85,6.31,5.83,5.35,4.87,4.66,4.46,4.25,4.34,4.42,4.51,4.23,3.95,3.67,3.7,3.74,3.77,3.65,3.53,3.41,3.48,3.56,3.63,3.33,3.03,2.73,3.07,3.42,3.76,3.17,2.58,1.99,2.13,2.26,2.4,2.05,1.71,1.36,1.37,1.39,1.4,1.43,1.45,1.48,1.38,1.27,1.17,1.24,1.31,1.38,1.8,2.21,2.63,2.03,1.43,0.83,0.92,1.01,1.1,1.25,1.41,1.56,1.53,1.5,1.47,1.49,1.52,1.54,4.33,4.11,3.9,3.21,2.51,1.82,2.02,2.21,2.41,2.46,2.5,2.55,2.6,2.66,2.71,2.41,2.35,2.28,2.22,2.07,1.91,1.76,1.65,1.64,1.89,2.33,2.77,3.21,3.27,3.32,3.38,2.93,2.48,2.03,1.98,1.92,1.87,1.73,2.04,3.12,4.19],\"sizemode\":\"area\",\"sizeref\":0.015774999999999997,\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"Moderate\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"2025-10-20T17:00:00+00:00\",\"2025-10-20T18:00:00+00:00\",\"2025-10-20T19:00:00+00:00\",\"2025-10-20T20:00:00+00:00\",\"2025-10-20T21:00:00+00:00\",\"2025-10-20T22:00:00+00:00\",\"2025-10-20T23:00:00+00:00\",\"2025-10-21T00:00:00+00:00\",\"2025-10-21T01:00:00+00:00\",\"2025-10-21T02:00:00+00:00\",\"2025-10-21T03:00:00+00:00\",\"2025-10-21T04:00:00+00:00\",\"2025-10-21T05:00:00+00:00\",\"2025-10-21T06:00:00+00:00\",\"2025-10-21T07:00:00+00:00\",\"2025-10-21T08:00:00+00:00\",\"2025-10-21T09:00:00+00:00\",\"2025-10-21T10:00:00+00:00\",\"2025-10-21T11:00:00+00:00\",\"2025-10-21T12:00:00+00:00\",\"2025-10-21T13:00:00+00:00\",\"2025-10-21T14:00:00+00:00\",\"2025-10-21T15:00:00+00:00\",\"2025-10-21T16:00:00+00:00\",\"2025-10-21T17:00:00+00:00\",\"2025-10-21T18:00:00+00:00\",\"2025-10-21T19:00:00+00:00\",\"2025-10-21T20:00:00+00:00\",\"2025-10-21T21:00:00+00:00\",\"2025-10-21T22:00:00+00:00\",\"2025-10-21T23:00:00+00:00\",\"2025-10-22T00:00:00+00:00\",\"2025-10-22T01:00:00+00:00\",\"2025-10-22T02:00:00+00:00\",\"2025-10-22T03:00:00+00:00\",\"2025-10-22T04:00:00+00:00\",\"2025-10-22T05:00:00+00:00\",\"2025-10-22T06:00:00+00:00\",\"2025-10-22T07:00:00+00:00\",\"2025-10-22T08:00:00+00:00\",\"2025-10-22T09:00:00+00:00\",\"2025-10-22T10:00:00+00:00\",\"2025-10-22T11:00:00+00:00\",\"2025-10-22T12:00:00+00:00\",\"2025-10-22T13:00:00+00:00\",\"2025-10-22T14:00:00+00:00\",\"2025-10-22T15:00:00+00:00\",\"2025-10-22T16:00:00+00:00\",\"2025-10-22T17:00:00+00:00\",\"2025-10-22T18:00:00+00:00\",\"2025-10-22T19:00:00+00:00\",\"2025-10-22T20:00:00+00:00\",\"2025-10-22T21:00:00+00:00\",\"2025-10-22T22:00:00+00:00\",\"2025-10-22T23:00:00+00:00\",\"2025-10-23T00:00:00+00:00\",\"2025-10-23T01:00:00+00:00\",\"2025-10-23T02:00:00+00:00\",\"2025-10-23T03:00:00+00:00\",\"2025-10-23T04:00:00+00:00\",\"2025-10-23T05:00:00+00:00\",\"2025-10-23T06:00:00+00:00\",\"2025-10-23T07:00:00+00:00\",\"2025-10-23T08:00:00+00:00\",\"2025-10-23T09:00:00+00:00\",\"2025-10-23T10:00:00+00:00\",\"2025-10-23T11:00:00+00:00\",\"2025-10-23T12:00:00+00:00\",\"2025-10-23T13:00:00+00:00\",\"2025-10-23T14:00:00+00:00\",\"2025-10-23T15:00:00+00:00\",\"2025-10-23T16:00:00+00:00\",\"2025-10-23T17:00:00+00:00\",\"2025-10-23T18:00:00+00:00\",\"2025-10-23T19:00:00+00:00\",\"2025-10-23T20:00:00+00:00\",\"2025-10-23T21:00:00+00:00\",\"2025-10-23T22:00:00+00:00\",\"2025-10-23T23:00:00+00:00\",\"2025-10-24T00:00:00+00:00\",\"2025-10-24T01:00:00+00:00\",\"2025-10-24T02:00:00+00:00\",\"2025-10-24T03:00:00+00:00\",\"2025-10-24T04:00:00+00:00\",\"2025-10-24T05:00:00+00:00\",\"2025-10-24T06:00:00+00:00\",\"2025-10-24T07:00:00+00:00\",\"2025-10-24T08:00:00+00:00\",\"2025-10-24T09:00:00+00:00\",\"2025-10-24T10:00:00+00:00\",\"2025-10-24T11:00:00+00:00\",\"2025-10-24T12:00:00+00:00\",\"2025-10-24T13:00:00+00:00\",\"2025-10-24T14:00:00+00:00\",\"2025-10-24T15:00:00+00:00\",\"2025-10-24T16:00:00+00:00\",\"2025-10-24T17:00:00+00:00\",\"2025-10-24T18:00:00+00:00\",\"2025-10-24T19:00:00+00:00\",\"2025-10-24T20:00:00+00:00\",\"2025-10-24T21:00:00+00:00\",\"2025-10-24T22:00:00+00:00\",\"2025-10-24T23:00:00+00:00\",\"2025-10-25T00:00:00+00:00\",\"2025-10-25T01:00:00+00:00\",\"2025-10-25T02:00:00+00:00\",\"2025-10-25T03:00:00+00:00\",\"2025-10-25T04:00:00+00:00\",\"2025-10-25T05:00:00+00:00\",\"2025-10-25T06:00:00+00:00\",\"2025-10-25T07:00:00+00:00\",\"2025-10-25T08:00:00+00:00\",\"2025-10-25T09:00:00+00:00\",\"2025-10-25T10:00:00+00:00\",\"2025-10-25T11:00:00+00:00\",\"2025-10-25T12:00:00+00:00\",\"2025-10-25T13:00:00+00:00\",\"2025-10-25T14:00:00+00:00\",\"2025-10-25T15:00:00+00:00\",\"2025-10-25T21:00:00+00:00\",\"2025-10-25T22:00:00+00:00\",\"2025-10-25T23:00:00+00:00\",\"2025-10-26T00:00:00+00:00\",\"2025-10-26T01:00:00+00:00\",\"2025-10-26T02:00:00+00:00\",\"2025-10-26T03:00:00+00:00\",\"2025-10-26T04:00:00+00:00\",\"2025-10-26T11:00:00+00:00\",\"2025-10-26T12:00:00+00:00\",\"2025-10-26T13:00:00+00:00\",\"2025-10-26T14:00:00+00:00\",\"2025-10-26T15:00:00+00:00\",\"2025-10-26T16:00:00+00:00\",\"2025-10-26T17:00:00+00:00\",\"2025-10-26T18:00:00+00:00\",\"2025-10-26T19:00:00+00:00\",\"2025-10-26T20:00:00+00:00\",\"2025-10-26T21:00:00+00:00\",\"2025-10-26T22:00:00+00:00\",\"2025-10-26T23:00:00+00:00\",\"2025-10-27T00:00:00+00:00\",\"2025-10-27T01:00:00+00:00\",\"2025-10-27T07:00:00+00:00\",\"2025-10-27T08:00:00+00:00\",\"2025-10-27T09:00:00+00:00\"],\"xaxis\":\"x\",\"y\":[0.9,0.91,0.92,0.94,0.95,0.98,1.01,1.04,1.09,1.13,1.18,1.19,1.19,1.2,1.22,1.24,1.26,1.34,1.42,1.49,1.51,1.53,1.55,1.55,1.55,1.55,1.54,1.54,1.54,1.56,1.58,1.6,1.63,1.65,1.67,1.7,1.74,1.77,1.76,1.75,1.74,1.75,1.75,1.76,1.74,1.72,1.71,1.7,1.7,1.69,1.67,1.64,1.62,1.61,1.61,1.6,1.61,1.62,1.62,1.63,1.64,1.64,1.66,1.68,1.7,1.71,1.71,1.72,1.71,1.71,1.7,1.7,1.69,1.69,1.68,1.66,1.65,1.62,1.6,1.58,1.56,1.54,1.52,1.51,1.49,1.48,1.47,1.46,1.46,1.45,1.44,1.43,1.42,1.4,1.38,1.36,1.33,1.31,1.29,1.27,1.25,1.23,1.22,1.2,1.2,1.18,1.16,1.14,1.12,1.1,1.09,1.07,1.06,1.05,1.03,1.02,1.02,1.01,1.01,0.98,0.98,0.97,0.97,0.97,0.97,0.97,0.97,0.95,0.95,0.95,0.95,0.95,0.95,0.96,0.96,0.96,0.96,0.96,0.96,0.95,0.95,0.95,0.91,0.9,0.89],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"lakecolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#506784\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"dark\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"bgcolor\":\"rgb(17,17,17)\",\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"bordercolor\":\"rgb(17,17,17)\",\"borderwidth\":1,\"tickwidth\":0},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"bgcolor\":\"rgb(17,17,17)\",\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Time\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Wave Height (m)\"}},\"legend\":{\"title\":{\"text\":\"Predicted Condition\"},\"tracegroupgap\":0,\"itemsizing\":\"constant\"},\"title\":{\"text\":\"🌊 Real-Time Marine Weather Prediction Dashboard\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('13146b8e-1e88-4451-b9a5-6ae7c7f75adc');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import plotly.express as px\n",
        "\n",
        "fig = px.scatter(\n",
        "    df,\n",
        "    x='Time',\n",
        "    y='Wave Height (m)',\n",
        "    color='Predicted Condition',\n",
        "    size='Wind Speed (m/s)',\n",
        "    title='🌊 Real-Time Marine Weather Prediction Dashboard',\n",
        "    hover_data=['Wind Speed (m/s)', 'Swell Height (m)', 'Swell Period (s)'],\n",
        "    template='plotly_dark'\n",
        ")\n",
        "fig.update_traces(mode='lines+markers')\n",
        "fig.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KNtHlcmktGDv"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
